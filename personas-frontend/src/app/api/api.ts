/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "http://localhost:8080".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name = "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface CultureFavoritesDto
 */
export interface CultureFavoritesDto {
    /**
     * 
     * @type {number}
     * @memberof CultureFavoritesDto
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof CultureFavoritesDto
     */
    movies?: string;
    /**
     * 
     * @type {string}
     * @memberof CultureFavoritesDto
     */
    books?: string;
    /**
     * 
     * @type {string}
     * @memberof CultureFavoritesDto
     */
    comics?: string;
    /**
     * 
     * @type {string}
     * @memberof CultureFavoritesDto
     */
    tv?: string;
    /**
     * 
     * @type {string}
     * @memberof CultureFavoritesDto
     */
    music?: string;
    /**
     * 
     * @type {string}
     * @memberof CultureFavoritesDto
     */
    games?: string;
}
/**
 * 
 * @export
 * @interface EmotionalMotivationsDto
 */
export interface EmotionalMotivationsDto {
    /**
     * 
     * @type {number}
     * @memberof EmotionalMotivationsDto
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof EmotionalMotivationsDto
     */
    passions?: string;
    /**
     * 
     * @type {string}
     * @memberof EmotionalMotivationsDto
     */
    goals?: string;
    /**
     * 
     * @type {string}
     * @memberof EmotionalMotivationsDto
     */
    joys?: string;
    /**
     * 
     * @type {string}
     * @memberof EmotionalMotivationsDto
     */
    fears?: string;
    /**
     * 
     * @type {string}
     * @memberof EmotionalMotivationsDto
     */
    frustrations?: string;
    /**
     * 
     * @type {string}
     * @memberof EmotionalMotivationsDto
     */
    habits?: string;
}
/**
 * 
 * @export
 * @interface JobDetailsDto
 */
export interface JobDetailsDto {
    /**
     * 
     * @type {number}
     * @memberof JobDetailsDto
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof JobDetailsDto
     */
    company?: string;
    /**
     * 
     * @type {string}
     * @memberof JobDetailsDto
     */
    industry?: string;
    /**
     * 
     * @type {string}
     * @memberof JobDetailsDto
     */
    salary?: string;
    /**
     * 
     * @type {string}
     * @memberof JobDetailsDto
     */
    title?: string;
}
/**
 * 
 * @export
 * @interface PersonaDto
 */
export interface PersonaDto {
    /**
     * 
     * @type {string}
     * @memberof PersonaDto
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonaDto
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof PersonaDto
     */
    age: string;
    /**
     * 
     * @type {string}
     * @memberof PersonaDto
     */
    story: string;
    /**
     * 
     * @type {string}
     * @memberof PersonaDto
     */
    image?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonaDto
     */
    color?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonaDto
     */
    location?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonaDto
     */
    family?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonaDto
     */
    personalityTraits?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonaDto
     */
    education?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonaDto
     */
    idols?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonaDto
     */
    brands?: string;
    /**
     * 
     * @type {ProjectDto}
     * @memberof PersonaDto
     */
    project?: ProjectDto;
    /**
     * 
     * @type {JobDetailsDto}
     * @memberof PersonaDto
     */
    job?: JobDetailsDto;
    /**
     * 
     * @type {CultureFavoritesDto}
     * @memberof PersonaDto
     */
    culture?: CultureFavoritesDto;
    /**
     * 
     * @type {EmotionalMotivationsDto}
     * @memberof PersonaDto
     */
    emotions?: EmotionalMotivationsDto;
}
/**
 * 
 * @export
 * @interface ProjectDto
 */
export interface ProjectDto {
    /**
     * 
     * @type {number}
     * @memberof ProjectDto
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof ProjectDto
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectDto
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectDto
     */
    icon?: string;
    /**
     * 
     * @type {Array<PersonaDto>}
     * @memberof ProjectDto
     */
    personas?: Array<PersonaDto>;
    /**
     * 
     * @type {Array<TagDto>}
     * @memberof ProjectDto
     */
    tags?: Array<TagDto>;
}
/**
 * 
 * @export
 * @interface TagDto
 */
export interface TagDto {
    /**
     * 
     * @type {number}
     * @memberof TagDto
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof TagDto
     */
    label: string;
    /**
     * 
     * @type {string}
     * @memberof TagDto
     */
    color?: string;
}
/**
 * PersonaControllerApi - fetch parameter creator
 * @export
 */
export const PersonaControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a persona
         * @param {PersonaDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create2(body: PersonaDto, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling create2.');
            }
            const localVarPath = `/api/personas`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"PersonaDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a persona
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById2(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteById2.');
            }
            const localVarPath = `/api/personas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update partially a persona
         * @param {PersonaDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fullUpdate2(body: PersonaDto, id: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling fullUpdate2.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling fullUpdate2.');
            }
            const localVarPath = `/api/personas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"PersonaDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all personas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll2(options: any = {}): FetchArgs {
            const localVarPath = `/api/personas`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get persona by its id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById2(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getById2.');
            }
            const localVarPath = `/api/personas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PersonaControllerApi - functional programming interface
 * @export
 */
export const PersonaControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a persona
         * @param {PersonaDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create2(body: PersonaDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PersonaDto> {
            const localVarFetchArgs = PersonaControllerApiFetchParamCreator(configuration).create2(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete a persona
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById2(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = PersonaControllerApiFetchParamCreator(configuration).deleteById2(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update partially a persona
         * @param {PersonaDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fullUpdate2(body: PersonaDto, id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PersonaDto> {
            const localVarFetchArgs = PersonaControllerApiFetchParamCreator(configuration).fullUpdate2(body, id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get all personas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll2(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<PersonaDto>> {
            const localVarFetchArgs = PersonaControllerApiFetchParamCreator(configuration).getAll2(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get persona by its id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById2(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PersonaDto> {
            const localVarFetchArgs = PersonaControllerApiFetchParamCreator(configuration).getById2(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * PersonaControllerApi - factory interface
 * @export
 */
export const PersonaControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Create a persona
         * @param {PersonaDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create2(body: PersonaDto, options?: any) {
            return PersonaControllerApiFp(configuration).create2(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete a persona
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById2(id: string, options?: any) {
            return PersonaControllerApiFp(configuration).deleteById2(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update partially a persona
         * @param {PersonaDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fullUpdate2(body: PersonaDto, id: string, options?: any) {
            return PersonaControllerApiFp(configuration).fullUpdate2(body, id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get all personas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll2(options?: any) {
            return PersonaControllerApiFp(configuration).getAll2(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get persona by its id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById2(id: string, options?: any) {
            return PersonaControllerApiFp(configuration).getById2(id, options)(fetch, basePath);
        },
    };
};

/**
 * PersonaControllerApi - object-oriented interface
 * @export
 * @class PersonaControllerApi
 * @extends {BaseAPI}
 */
export class PersonaControllerApi extends BaseAPI {
    /**
     * 
     * @summary Create a persona
     * @param {PersonaDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonaControllerApi
     */
    public create2(body: PersonaDto, options?: any) {
        return PersonaControllerApiFp(this.configuration).create2(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete a persona
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonaControllerApi
     */
    public deleteById2(id: string, options?: any) {
        return PersonaControllerApiFp(this.configuration).deleteById2(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update partially a persona
     * @param {PersonaDto} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonaControllerApi
     */
    public fullUpdate2(body: PersonaDto, id: string, options?: any) {
        return PersonaControllerApiFp(this.configuration).fullUpdate2(body, id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get all personas
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonaControllerApi
     */
    public getAll2(options?: any) {
        return PersonaControllerApiFp(this.configuration).getAll2(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get persona by its id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonaControllerApi
     */
    public getById2(id: string, options?: any) {
        return PersonaControllerApiFp(this.configuration).getById2(id, options)(this.fetch, this.basePath);
    }

}
/**
 * ProjectControllerApi - fetch parameter creator
 * @export
 */
export const ProjectControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a project
         * @param {ProjectDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create1(body: ProjectDto, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling create1.');
            }
            const localVarPath = `/api/projects`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ProjectDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a project
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById1(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteById1.');
            }
            const localVarPath = `/api/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update partially a project
         * @param {ProjectDto} body 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fullUpdate1(body: ProjectDto, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling fullUpdate1.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling fullUpdate1.');
            }
            const localVarPath = `/api/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ProjectDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll1(options: any = {}): FetchArgs {
            const localVarPath = `/api/projects`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a project by its id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById1(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getById1.');
            }
            const localVarPath = `/api/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get projects by the id of one of their tags
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByTagId(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getByTagId.');
            }
            const localVarPath = `/api/projects/tags/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectControllerApi - functional programming interface
 * @export
 */
export const ProjectControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a project
         * @param {ProjectDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create1(body: ProjectDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProjectDto> {
            const localVarFetchArgs = ProjectControllerApiFetchParamCreator(configuration).create1(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete a project
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById1(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = ProjectControllerApiFetchParamCreator(configuration).deleteById1(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update partially a project
         * @param {ProjectDto} body 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fullUpdate1(body: ProjectDto, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProjectDto> {
            const localVarFetchArgs = ProjectControllerApiFetchParamCreator(configuration).fullUpdate1(body, id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get all projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll1(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ProjectDto>> {
            const localVarFetchArgs = ProjectControllerApiFetchParamCreator(configuration).getAll1(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get a project by its id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById1(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProjectDto> {
            const localVarFetchArgs = ProjectControllerApiFetchParamCreator(configuration).getById1(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get projects by the id of one of their tags
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByTagId(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ProjectDto>> {
            const localVarFetchArgs = ProjectControllerApiFetchParamCreator(configuration).getByTagId(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ProjectControllerApi - factory interface
 * @export
 */
export const ProjectControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Create a project
         * @param {ProjectDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create1(body: ProjectDto, options?: any) {
            return ProjectControllerApiFp(configuration).create1(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete a project
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById1(id: number, options?: any) {
            return ProjectControllerApiFp(configuration).deleteById1(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update partially a project
         * @param {ProjectDto} body 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fullUpdate1(body: ProjectDto, id: number, options?: any) {
            return ProjectControllerApiFp(configuration).fullUpdate1(body, id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get all projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll1(options?: any) {
            return ProjectControllerApiFp(configuration).getAll1(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get a project by its id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById1(id: number, options?: any) {
            return ProjectControllerApiFp(configuration).getById1(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get projects by the id of one of their tags
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByTagId(id: number, options?: any) {
            return ProjectControllerApiFp(configuration).getByTagId(id, options)(fetch, basePath);
        },
    };
};

/**
 * ProjectControllerApi - object-oriented interface
 * @export
 * @class ProjectControllerApi
 * @extends {BaseAPI}
 */
export class ProjectControllerApi extends BaseAPI {
    /**
     * 
     * @summary Create a project
     * @param {ProjectDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectControllerApi
     */
    public create1(body: ProjectDto, options?: any) {
        return ProjectControllerApiFp(this.configuration).create1(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete a project
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectControllerApi
     */
    public deleteById1(id: number, options?: any) {
        return ProjectControllerApiFp(this.configuration).deleteById1(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update partially a project
     * @param {ProjectDto} body 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectControllerApi
     */
    public fullUpdate1(body: ProjectDto, id: number, options?: any) {
        return ProjectControllerApiFp(this.configuration).fullUpdate1(body, id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get all projects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectControllerApi
     */
    public getAll1(options?: any) {
        return ProjectControllerApiFp(this.configuration).getAll1(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get a project by its id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectControllerApi
     */
    public getById1(id: number, options?: any) {
        return ProjectControllerApiFp(this.configuration).getById1(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get projects by the id of one of their tags
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectControllerApi
     */
    public getByTagId(id: number, options?: any) {
        return ProjectControllerApiFp(this.configuration).getByTagId(id, options)(this.fetch, this.basePath);
    }

}
/**
 * TagControllerApi - fetch parameter creator
 * @export
 */
export const TagControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a tag
         * @param {TagDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: TagDto, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling create.');
            }
            const localVarPath = `/api/tags`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"TagDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a tag
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteById.');
            }
            const localVarPath = `/api/tags/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update partially a tag
         * @param {TagDto} body 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fullUpdate(body: TagDto, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling fullUpdate.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling fullUpdate.');
            }
            const localVarPath = `/api/tags/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"TagDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(options: any = {}): FetchArgs {
            const localVarPath = `/api/tags`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a tag by its id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getById.');
            }
            const localVarPath = `/api/tags/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get tags by the id of one of their projects
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByProjectId(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getByProjectId.');
            }
            const localVarPath = `/api/tags/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TagControllerApi - functional programming interface
 * @export
 */
export const TagControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a tag
         * @param {TagDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: TagDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TagDto> {
            const localVarFetchArgs = TagControllerApiFetchParamCreator(configuration).create(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete a tag
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = TagControllerApiFetchParamCreator(configuration).deleteById(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update partially a tag
         * @param {TagDto} body 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fullUpdate(body: TagDto, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TagDto> {
            const localVarFetchArgs = TagControllerApiFetchParamCreator(configuration).fullUpdate(body, id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get all tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<TagDto>> {
            const localVarFetchArgs = TagControllerApiFetchParamCreator(configuration).getAll(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get a tag by its id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TagDto> {
            const localVarFetchArgs = TagControllerApiFetchParamCreator(configuration).getById(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get tags by the id of one of their projects
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByProjectId(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<TagDto>> {
            const localVarFetchArgs = TagControllerApiFetchParamCreator(configuration).getByProjectId(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * TagControllerApi - factory interface
 * @export
 */
export const TagControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Create a tag
         * @param {TagDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(body: TagDto, options?: any) {
            return TagControllerApiFp(configuration).create(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete a tag
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById(id: number, options?: any) {
            return TagControllerApiFp(configuration).deleteById(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update partially a tag
         * @param {TagDto} body 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fullUpdate(body: TagDto, id: number, options?: any) {
            return TagControllerApiFp(configuration).fullUpdate(body, id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get all tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(options?: any) {
            return TagControllerApiFp(configuration).getAll(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get a tag by its id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(id: number, options?: any) {
            return TagControllerApiFp(configuration).getById(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get tags by the id of one of their projects
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByProjectId(id: number, options?: any) {
            return TagControllerApiFp(configuration).getByProjectId(id, options)(fetch, basePath);
        },
    };
};

/**
 * TagControllerApi - object-oriented interface
 * @export
 * @class TagControllerApi
 * @extends {BaseAPI}
 */
export class TagControllerApi extends BaseAPI {
    /**
     * 
     * @summary Create a tag
     * @param {TagDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagControllerApi
     */
    public create(body: TagDto, options?: any) {
        return TagControllerApiFp(this.configuration).create(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete a tag
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagControllerApi
     */
    public deleteById(id: number, options?: any) {
        return TagControllerApiFp(this.configuration).deleteById(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update partially a tag
     * @param {TagDto} body 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagControllerApi
     */
    public fullUpdate(body: TagDto, id: number, options?: any) {
        return TagControllerApiFp(this.configuration).fullUpdate(body, id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get all tags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagControllerApi
     */
    public getAll(options?: any) {
        return TagControllerApiFp(this.configuration).getAll(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get a tag by its id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagControllerApi
     */
    public getById(id: number, options?: any) {
        return TagControllerApiFp(this.configuration).getById(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get tags by the id of one of their projects
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagControllerApi
     */
    public getByProjectId(id: number, options?: any) {
        return TagControllerApiFp(this.configuration).getByProjectId(id, options)(this.fetch, this.basePath);
    }

}
