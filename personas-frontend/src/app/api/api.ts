/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "http://localhost:8080".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name = "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface CultureFavoritesDto
 */
export interface CultureFavoritesDto {
    /**
     * 
     * @type {number}
     * @memberof CultureFavoritesDto
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof CultureFavoritesDto
     */
    movies?: string;
    /**
     * 
     * @type {string}
     * @memberof CultureFavoritesDto
     */
    books?: string;
    /**
     * 
     * @type {string}
     * @memberof CultureFavoritesDto
     */
    comics?: string;
    /**
     * 
     * @type {string}
     * @memberof CultureFavoritesDto
     */
    tv?: string;
    /**
     * 
     * @type {string}
     * @memberof CultureFavoritesDto
     */
    music?: string;
    /**
     * 
     * @type {string}
     * @memberof CultureFavoritesDto
     */
    games?: string;
}
/**
 * 
 * @export
 * @interface EmotionalMotivationsDto
 */
export interface EmotionalMotivationsDto {
    /**
     * 
     * @type {number}
     * @memberof EmotionalMotivationsDto
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof EmotionalMotivationsDto
     */
    passions?: string;
    /**
     * 
     * @type {string}
     * @memberof EmotionalMotivationsDto
     */
    goals?: string;
    /**
     * 
     * @type {string}
     * @memberof EmotionalMotivationsDto
     */
    joys?: string;
    /**
     * 
     * @type {string}
     * @memberof EmotionalMotivationsDto
     */
    fears?: string;
    /**
     * 
     * @type {string}
     * @memberof EmotionalMotivationsDto
     */
    frustrations?: string;
    /**
     * 
     * @type {string}
     * @memberof EmotionalMotivationsDto
     */
    habits?: string;
}
/**
 * 
 * @export
 * @interface ErrorMessage
 */
export interface ErrorMessage {
    /**
     * 
     * @type {number}
     * @memberof ErrorMessage
     */
    statusCode?: number;
    /**
     * 
     * @type {Date}
     * @memberof ErrorMessage
     */
    timestamp?: Date;
    /**
     * 
     * @type {string}
     * @memberof ErrorMessage
     */
    message?: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorMessage
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface JobDetailsDto
 */
export interface JobDetailsDto {
    /**
     * 
     * @type {number}
     * @memberof JobDetailsDto
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof JobDetailsDto
     */
    company?: string;
    /**
     * 
     * @type {string}
     * @memberof JobDetailsDto
     */
    industry?: string;
    /**
     * 
     * @type {string}
     * @memberof JobDetailsDto
     */
    salary?: string;
    /**
     * 
     * @type {string}
     * @memberof JobDetailsDto
     */
    title?: string;
}
/**
 * 
 * @export
 * @interface PersonaDto
 */
export interface PersonaDto {
    /**
     * 
     * @type {string}
     * @memberof PersonaDto
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonaDto
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof PersonaDto
     */
    age: string;
    /**
     * 
     * @type {string}
     * @memberof PersonaDto
     */
    story: string;
    /**
     * 
     * @type {string}
     * @memberof PersonaDto
     */
    avatar?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonaDto
     */
    color?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonaDto
     */
    location?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonaDto
     */
    family?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonaDto
     */
    personalityTraits?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonaDto
     */
    education?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonaDto
     */
    idols?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonaDto
     */
    brands?: string;
    /**
     * 
     * @type {ProjectDto}
     * @memberof PersonaDto
     */
    project?: ProjectDto;
    /**
     * 
     * @type {JobDetailsDto}
     * @memberof PersonaDto
     */
    job?: JobDetailsDto;
    /**
     * 
     * @type {CultureFavoritesDto}
     * @memberof PersonaDto
     */
    culture?: CultureFavoritesDto;
    /**
     * 
     * @type {EmotionalMotivationsDto}
     * @memberof PersonaDto
     */
    emotions?: EmotionalMotivationsDto;
}
/**
 * 
 * @export
 * @interface ProjectDto
 */
export interface ProjectDto {
    /**
     * 
     * @type {number}
     * @memberof ProjectDto
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof ProjectDto
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectDto
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectDto
     */
    icon?: string;
    /**
     * 
     * @type {Array<PersonaDto>}
     * @memberof ProjectDto
     */
    personas?: Array<PersonaDto>;
    /**
     * 
     * @type {Array<TagDto>}
     * @memberof ProjectDto
     */
    tags?: Array<TagDto>;
}
/**
 * 
 * @export
 * @interface SummaryDto
 */
export interface SummaryDto {
    /**
     * 
     * @type {Array<ProjectDto>}
     * @memberof SummaryDto
     */
    projects?: Array<ProjectDto>;
    /**
     * 
     * @type {Array<PersonaDto>}
     * @memberof SummaryDto
     */
    personas?: Array<PersonaDto>;
}
/**
 * 
 * @export
 * @interface TagDto
 */
export interface TagDto {
    /**
     * 
     * @type {number}
     * @memberof TagDto
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof TagDto
     */
    label: string;
    /**
     * 
     * @type {string}
     * @memberof TagDto
     */
    color?: string;
}
/**
 * PersonaControllerApi - fetch parameter creator
 * @export
 */
export const PersonaControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a persona
         * @param {PersonaDto} body 
         * @param {number} [projectId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPersona(body: PersonaDto, projectId?: number, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createPersona.');
            }
            const localVarPath = `/api/personas`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (projectId !== undefined) {
                localVarQueryParameter['projectId'] = projectId;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"PersonaDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a persona
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePersona(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deletePersona.');
            }
            const localVarPath = `/api/personas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get persona by its id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersona(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getPersona.');
            }
            const localVarPath = `/api/personas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all personas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonas(options: any = {}): FetchArgs {
            const localVarPath = `/api/personas`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update partially a persona
         * @param {PersonaDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePersona(body: PersonaDto, id: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updatePersona.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updatePersona.');
            }
            const localVarPath = `/api/personas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"PersonaDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PersonaControllerApi - functional programming interface
 * @export
 */
export const PersonaControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a persona
         * @param {PersonaDto} body 
         * @param {number} [projectId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPersona(body: PersonaDto, projectId?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PersonaDto> {
            const localVarFetchArgs = PersonaControllerApiFetchParamCreator(configuration).createPersona(body, projectId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete a persona
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePersona(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = PersonaControllerApiFetchParamCreator(configuration).deletePersona(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get persona by its id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersona(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PersonaDto> {
            const localVarFetchArgs = PersonaControllerApiFetchParamCreator(configuration).getPersona(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get all personas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonas(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<PersonaDto>> {
            const localVarFetchArgs = PersonaControllerApiFetchParamCreator(configuration).getPersonas(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update partially a persona
         * @param {PersonaDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePersona(body: PersonaDto, id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PersonaDto> {
            const localVarFetchArgs = PersonaControllerApiFetchParamCreator(configuration).updatePersona(body, id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * PersonaControllerApi - factory interface
 * @export
 */
export const PersonaControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Create a persona
         * @param {PersonaDto} body 
         * @param {number} [projectId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPersona(body: PersonaDto, projectId?: number, options?: any) {
            return PersonaControllerApiFp(configuration).createPersona(body, projectId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete a persona
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePersona(id: string, options?: any) {
            return PersonaControllerApiFp(configuration).deletePersona(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get persona by its id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersona(id: string, options?: any) {
            return PersonaControllerApiFp(configuration).getPersona(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get all personas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonas(options?: any) {
            return PersonaControllerApiFp(configuration).getPersonas(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update partially a persona
         * @param {PersonaDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePersona(body: PersonaDto, id: string, options?: any) {
            return PersonaControllerApiFp(configuration).updatePersona(body, id, options)(fetch, basePath);
        },
    };
};

/**
 * PersonaControllerApi - object-oriented interface
 * @export
 * @class PersonaControllerApi
 * @extends {BaseAPI}
 */
export class PersonaControllerApi extends BaseAPI {
    /**
     * 
     * @summary Create a persona
     * @param {PersonaDto} body 
     * @param {number} [projectId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonaControllerApi
     */
    public createPersona(body: PersonaDto, projectId?: number, options?: any) {
        return PersonaControllerApiFp(this.configuration).createPersona(body, projectId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete a persona
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonaControllerApi
     */
    public deletePersona(id: string, options?: any) {
        return PersonaControllerApiFp(this.configuration).deletePersona(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get persona by its id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonaControllerApi
     */
    public getPersona(id: string, options?: any) {
        return PersonaControllerApiFp(this.configuration).getPersona(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get all personas
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonaControllerApi
     */
    public getPersonas(options?: any) {
        return PersonaControllerApiFp(this.configuration).getPersonas(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update partially a persona
     * @param {PersonaDto} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonaControllerApi
     */
    public updatePersona(body: PersonaDto, id: string, options?: any) {
        return PersonaControllerApiFp(this.configuration).updatePersona(body, id, options)(this.fetch, this.basePath);
    }

}
/**
 * ProjectControllerApi - fetch parameter creator
 * @export
 */
export const ProjectControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a project
         * @param {ProjectDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProject(body: ProjectDto, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createProject.');
            }
            const localVarPath = `/api/projects`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ProjectDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a project
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProject(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteProject.');
            }
            const localVarPath = `/api/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a project by its id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProject(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getProject.');
            }
            const localVarPath = `/api/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all projects
         * @param {string} [tagId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjects(tagId?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/projects`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tagId !== undefined) {
                localVarQueryParameter['tagId'] = tagId;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get projects by the id of one of their tags
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectsByTagId(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getProjectsByTagId.');
            }
            const localVarPath = `/api/projects/tags/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update partially a project
         * @param {ProjectDto} body 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProject(body: ProjectDto, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateProject.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateProject.');
            }
            const localVarPath = `/api/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ProjectDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectControllerApi - functional programming interface
 * @export
 */
export const ProjectControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a project
         * @param {ProjectDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProject(body: ProjectDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProjectDto> {
            const localVarFetchArgs = ProjectControllerApiFetchParamCreator(configuration).createProject(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete a project
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProject(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = ProjectControllerApiFetchParamCreator(configuration).deleteProject(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get a project by its id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProject(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProjectDto> {
            const localVarFetchArgs = ProjectControllerApiFetchParamCreator(configuration).getProject(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get all projects
         * @param {string} [tagId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjects(tagId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ProjectDto>> {
            const localVarFetchArgs = ProjectControllerApiFetchParamCreator(configuration).getProjects(tagId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get projects by the id of one of their tags
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectsByTagId(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ProjectDto>> {
            const localVarFetchArgs = ProjectControllerApiFetchParamCreator(configuration).getProjectsByTagId(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update partially a project
         * @param {ProjectDto} body 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProject(body: ProjectDto, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProjectDto> {
            const localVarFetchArgs = ProjectControllerApiFetchParamCreator(configuration).updateProject(body, id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ProjectControllerApi - factory interface
 * @export
 */
export const ProjectControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Create a project
         * @param {ProjectDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProject(body: ProjectDto, options?: any) {
            return ProjectControllerApiFp(configuration).createProject(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete a project
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProject(id: number, options?: any) {
            return ProjectControllerApiFp(configuration).deleteProject(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get a project by its id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProject(id: number, options?: any) {
            return ProjectControllerApiFp(configuration).getProject(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get all projects
         * @param {string} [tagId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjects(tagId?: string, options?: any) {
            return ProjectControllerApiFp(configuration).getProjects(tagId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get projects by the id of one of their tags
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectsByTagId(id: number, options?: any) {
            return ProjectControllerApiFp(configuration).getProjectsByTagId(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update partially a project
         * @param {ProjectDto} body 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProject(body: ProjectDto, id: number, options?: any) {
            return ProjectControllerApiFp(configuration).updateProject(body, id, options)(fetch, basePath);
        },
    };
};

/**
 * ProjectControllerApi - object-oriented interface
 * @export
 * @class ProjectControllerApi
 * @extends {BaseAPI}
 */
export class ProjectControllerApi extends BaseAPI {
    /**
     * 
     * @summary Create a project
     * @param {ProjectDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectControllerApi
     */
    public createProject(body: ProjectDto, options?: any) {
        return ProjectControllerApiFp(this.configuration).createProject(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete a project
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectControllerApi
     */
    public deleteProject(id: number, options?: any) {
        return ProjectControllerApiFp(this.configuration).deleteProject(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get a project by its id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectControllerApi
     */
    public getProject(id: number, options?: any) {
        return ProjectControllerApiFp(this.configuration).getProject(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get all projects
     * @param {string} [tagId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectControllerApi
     */
    public getProjects(tagId?: string, options?: any) {
        return ProjectControllerApiFp(this.configuration).getProjects(tagId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get projects by the id of one of their tags
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectControllerApi
     */
    public getProjectsByTagId(id: number, options?: any) {
        return ProjectControllerApiFp(this.configuration).getProjectsByTagId(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update partially a project
     * @param {ProjectDto} body 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectControllerApi
     */
    public updateProject(body: ProjectDto, id: number, options?: any) {
        return ProjectControllerApiFp(this.configuration).updateProject(body, id, options)(this.fetch, this.basePath);
    }

}
/**
 * TagControllerApi - fetch parameter creator
 * @export
 */
export const TagControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a tag
         * @param {TagDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTag(body: TagDto, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createTag.');
            }
            const localVarPath = `/api/tags`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"TagDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a tag
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTag(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteTag.');
            }
            const localVarPath = `/api/tags/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a tag by its id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTag(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getTag.');
            }
            const localVarPath = `/api/tags/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTags(options: any = {}): FetchArgs {
            const localVarPath = `/api/tags`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get tags by the id of one of their projects
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTagsByProjectId(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getTagsByProjectId.');
            }
            const localVarPath = `/api/tags/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update partially a tag
         * @param {TagDto} body 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTag(body: TagDto, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateTag.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateTag.');
            }
            const localVarPath = `/api/tags/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"TagDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TagControllerApi - functional programming interface
 * @export
 */
export const TagControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a tag
         * @param {TagDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTag(body: TagDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TagDto> {
            const localVarFetchArgs = TagControllerApiFetchParamCreator(configuration).createTag(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete a tag
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTag(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = TagControllerApiFetchParamCreator(configuration).deleteTag(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get a tag by its id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTag(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TagDto> {
            const localVarFetchArgs = TagControllerApiFetchParamCreator(configuration).getTag(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get all tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTags(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<TagDto>> {
            const localVarFetchArgs = TagControllerApiFetchParamCreator(configuration).getTags(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get tags by the id of one of their projects
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTagsByProjectId(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<TagDto>> {
            const localVarFetchArgs = TagControllerApiFetchParamCreator(configuration).getTagsByProjectId(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update partially a tag
         * @param {TagDto} body 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTag(body: TagDto, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TagDto> {
            const localVarFetchArgs = TagControllerApiFetchParamCreator(configuration).updateTag(body, id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * TagControllerApi - factory interface
 * @export
 */
export const TagControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Create a tag
         * @param {TagDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTag(body: TagDto, options?: any) {
            return TagControllerApiFp(configuration).createTag(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete a tag
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTag(id: number, options?: any) {
            return TagControllerApiFp(configuration).deleteTag(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get a tag by its id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTag(id: number, options?: any) {
            return TagControllerApiFp(configuration).getTag(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get all tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTags(options?: any) {
            return TagControllerApiFp(configuration).getTags(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get tags by the id of one of their projects
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTagsByProjectId(id: number, options?: any) {
            return TagControllerApiFp(configuration).getTagsByProjectId(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update partially a tag
         * @param {TagDto} body 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTag(body: TagDto, id: number, options?: any) {
            return TagControllerApiFp(configuration).updateTag(body, id, options)(fetch, basePath);
        },
    };
};

/**
 * TagControllerApi - object-oriented interface
 * @export
 * @class TagControllerApi
 * @extends {BaseAPI}
 */
export class TagControllerApi extends BaseAPI {
    /**
     * 
     * @summary Create a tag
     * @param {TagDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagControllerApi
     */
    public createTag(body: TagDto, options?: any) {
        return TagControllerApiFp(this.configuration).createTag(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete a tag
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagControllerApi
     */
    public deleteTag(id: number, options?: any) {
        return TagControllerApiFp(this.configuration).deleteTag(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get a tag by its id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagControllerApi
     */
    public getTag(id: number, options?: any) {
        return TagControllerApiFp(this.configuration).getTag(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get all tags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagControllerApi
     */
    public getTags(options?: any) {
        return TagControllerApiFp(this.configuration).getTags(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get tags by the id of one of their projects
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagControllerApi
     */
    public getTagsByProjectId(id: number, options?: any) {
        return TagControllerApiFp(this.configuration).getTagsByProjectId(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update partially a tag
     * @param {TagDto} body 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagControllerApi
     */
    public updateTag(body: TagDto, id: number, options?: any) {
        return TagControllerApiFp(this.configuration).updateTag(body, id, options)(this.fetch, this.basePath);
    }

}
/**
 * UserControllerApi - fetch parameter creator
 * @export
 */
export const UserControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get summary of projects and personas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSummary(options: any = {}): FetchArgs {
            const localVarPath = `/api/user/summary`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserControllerApi - functional programming interface
 * @export
 */
export const UserControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get summary of projects and personas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSummary(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SummaryDto> {
            const localVarFetchArgs = UserControllerApiFetchParamCreator(configuration).getSummary(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * UserControllerApi - factory interface
 * @export
 */
export const UserControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Get summary of projects and personas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSummary(options?: any) {
            return UserControllerApiFp(configuration).getSummary(options)(fetch, basePath);
        },
    };
};

/**
 * UserControllerApi - object-oriented interface
 * @export
 * @class UserControllerApi
 * @extends {BaseAPI}
 */
export class UserControllerApi extends BaseAPI {
    /**
     * 
     * @summary Get summary of projects and personas
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public getSummary(options?: any) {
        return UserControllerApiFp(this.configuration).getSummary(options)(this.fetch, this.basePath);
    }

}
