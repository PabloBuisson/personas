/**
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("PersonaControllerApi", () => {
  let instance: api.PersonaControllerApi
  beforeEach(function() {
    instance = new api.PersonaControllerApi(config)
  });

  test("createPersona", () => {
    const body: api.PersonaDto = undefined
    const projectId: number = 789
    return expect(instance.createPersona(body, projectId, {})).resolves.toBe(null)
  })
  test("deletePersona", () => {
    const id: string = "38400000-8cf0-11bd-b23e-10b96e4ef00d"
    return expect(instance.deletePersona(id, {})).resolves.toBe(null)
  })
  test("getPersona", () => {
    const id: string = "38400000-8cf0-11bd-b23e-10b96e4ef00d"
    return expect(instance.getPersona(id, {})).resolves.toBe(null)
  })
  test("getPersonas", () => {
    return expect(instance.getPersonas({})).resolves.toBe(null)
  })
  test("updatePersona", () => {
    const body: api.PersonaDto = undefined
    const id: string = "38400000-8cf0-11bd-b23e-10b96e4ef00d"
    return expect(instance.updatePersona(body, id, {})).resolves.toBe(null)
  })
})

describe("ProjectControllerApi", () => {
  let instance: api.ProjectControllerApi
  beforeEach(function() {
    instance = new api.ProjectControllerApi(config)
  });

  test("createProject", () => {
    const body: api.ProjectDto = undefined
    return expect(instance.createProject(body, {})).resolves.toBe(null)
  })
  test("deleteProject", () => {
    const id: number = 789
    return expect(instance.deleteProject(id, {})).resolves.toBe(null)
  })
  test("getProject", () => {
    const id: number = 789
    return expect(instance.getProject(id, {})).resolves.toBe(null)
  })
  test("getProjects", () => {
    const tagId: string = "tagId_example"
    return expect(instance.getProjects(tagId, {})).resolves.toBe(null)
  })
  test("getProjectsByTagId", () => {
    const id: number = 789
    return expect(instance.getProjectsByTagId(id, {})).resolves.toBe(null)
  })
  test("updateProject", () => {
    const body: api.ProjectDto = undefined
    const id: number = 789
    return expect(instance.updateProject(body, id, {})).resolves.toBe(null)
  })
})

describe("TagControllerApi", () => {
  let instance: api.TagControllerApi
  beforeEach(function() {
    instance = new api.TagControllerApi(config)
  });

  test("createTag", () => {
    const body: api.TagDto = undefined
    return expect(instance.createTag(body, {})).resolves.toBe(null)
  })
  test("deleteTag", () => {
    const id: number = 789
    return expect(instance.deleteTag(id, {})).resolves.toBe(null)
  })
  test("getTag", () => {
    const id: number = 789
    return expect(instance.getTag(id, {})).resolves.toBe(null)
  })
  test("getTags", () => {
    return expect(instance.getTags({})).resolves.toBe(null)
  })
  test("getTagsByProjectId", () => {
    const id: number = 789
    return expect(instance.getTagsByProjectId(id, {})).resolves.toBe(null)
  })
  test("updateTag", () => {
    const body: api.TagDto = undefined
    const id: number = 789
    return expect(instance.updateTag(body, id, {})).resolves.toBe(null)
  })
})

describe("UserControllerApi", () => {
  let instance: api.UserControllerApi
  beforeEach(function() {
    instance = new api.UserControllerApi(config)
  });

  test("getSummary", () => {
    return expect(instance.getSummary({})).resolves.toBe(null)
  })
})

