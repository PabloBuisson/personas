/**
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("PersonaControllerApi", () => {
  let instance: api.PersonaControllerApi
  beforeEach(function() {
    instance = new api.PersonaControllerApi(config)
  });

  test("create2", () => {
    const body: api.PersonaDto = undefined
    return expect(instance.create2(body, {})).resolves.toBe(null)
  })
  test("deleteById2", () => {
    const id: string = "38400000-8cf0-11bd-b23e-10b96e4ef00d"
    return expect(instance.deleteById2(id, {})).resolves.toBe(null)
  })
  test("fullUpdate2", () => {
    const body: api.PersonaDto = undefined
    const id: string = "38400000-8cf0-11bd-b23e-10b96e4ef00d"
    return expect(instance.fullUpdate2(body, id, {})).resolves.toBe(null)
  })
  test("getAll2", () => {
    return expect(instance.getAll2({})).resolves.toBe(null)
  })
  test("getById2", () => {
    const id: string = "38400000-8cf0-11bd-b23e-10b96e4ef00d"
    return expect(instance.getById2(id, {})).resolves.toBe(null)
  })
})

describe("ProjectControllerApi", () => {
  let instance: api.ProjectControllerApi
  beforeEach(function() {
    instance = new api.ProjectControllerApi(config)
  });

  test("create1", () => {
    const body: api.ProjectDto = undefined
    return expect(instance.create1(body, {})).resolves.toBe(null)
  })
  test("deleteById1", () => {
    const id: number = 789
    return expect(instance.deleteById1(id, {})).resolves.toBe(null)
  })
  test("fullUpdate1", () => {
    const body: api.ProjectDto = undefined
    const id: number = 789
    return expect(instance.fullUpdate1(body, id, {})).resolves.toBe(null)
  })
  test("getAll1", () => {
    return expect(instance.getAll1({})).resolves.toBe(null)
  })
  test("getById1", () => {
    const id: number = 789
    return expect(instance.getById1(id, {})).resolves.toBe(null)
  })
  test("getByTagId", () => {
    const id: number = 789
    return expect(instance.getByTagId(id, {})).resolves.toBe(null)
  })
})

describe("TagControllerApi", () => {
  let instance: api.TagControllerApi
  beforeEach(function() {
    instance = new api.TagControllerApi(config)
  });

  test("create", () => {
    const body: api.TagDto = undefined
    return expect(instance.create(body, {})).resolves.toBe(null)
  })
  test("deleteById", () => {
    const id: number = 789
    return expect(instance.deleteById(id, {})).resolves.toBe(null)
  })
  test("fullUpdate", () => {
    const body: api.TagDto = undefined
    const id: number = 789
    return expect(instance.fullUpdate(body, id, {})).resolves.toBe(null)
  })
  test("getAll", () => {
    return expect(instance.getAll({})).resolves.toBe(null)
  })
  test("getById", () => {
    const id: number = 789
    return expect(instance.getById(id, {})).resolves.toBe(null)
  })
  test("getByProjectId", () => {
    const id: number = 789
    return expect(instance.getByProjectId(id, {})).resolves.toBe(null)
  })
})

